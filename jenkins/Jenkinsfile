pipeline {
    agent any

    environment {
        ECR_REPO = 'your-ecr-repo'
        AWS_REGION = 'us-west-2'
    }

    parameters {
        choice(name: 'MICROSERVICE', choices: ['portfolio-service', 'gallery-service'], description: 'Microservice to deploy')
        choice(name: 'BRANCH_NAME', choices: ['dev', 'uat', 'prod'], description: 'Branch to deploy')
        string(name: 'GIT_TAG', defaultValue: 'latest', description: 'Git tag for deployment')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        userRemoteConfigs: [[url: 'https://github.com/rotanaapp/final_devops_II.git']],
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        submoduleCfg: [],
                        extensions: []
                    ])
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    def appName = params.MICROSERVICE
                    sh "docker build -t ${ECR_REPO}/${appName}:${env.BUILD_NUMBER} ./${appName}/"
                    sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}"
                    sh "docker push ${ECR_REPO}/${appName}:${env.BUILD_NUMBER}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def appName = params.MICROSERVICE
                    def terraformDir = "${appName}/terraform/"
                    dir(terraformDir) {
                        sh "terraform init"
                        sh "terraform apply -var=\"image=${ECR_REPO}/${appName}:${env.BUILD_NUMBER}\" -auto-approve"
                    }
                }
            }
        }
    }
}
